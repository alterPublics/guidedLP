# MyPy configuration for Guided Label Propagation library
# Strict type checking optimized for scientific computing with C++ bindings

[mypy]
# Python version targeting
python_version = 3.9
warn_return_any = True
warn_unused_configs = True

# Strictness settings - balanced for scientific computing
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

# Import and module discovery
namespace_packages = True
explicit_package_bases = True
ignore_missing_imports = False
follow_imports = normal

# Error output configuration  
show_error_codes = True
show_error_context = True
show_column_numbers = True
pretty = True
color_output = True
error_summary = True

# Cache and performance
cache_dir = .mypy_cache
sqlite_cache = True
incremental = True

# Additional warnings configuration
warn_incomplete_stub = True

# Per-module configuration for scientific libraries
# Many C++ bindings and scientific libraries have incomplete type information

[mypy-networkit.*]
# NetworkIt C++ bindings have limited type information
ignore_missing_imports = True
ignore_errors = True

[mypy-sklearn.*]
# Scikit-learn has some typing issues  
ignore_missing_imports = True

[mypy-scipy.*]
# SciPy has incomplete type stubs for some modules
ignore_missing_imports = True

[mypy-polars.*]
# Polars has evolving type annotations
ignore_missing_imports = True
follow_imports = skip

[mypy-numpy.*]
# NumPy typing can be complex, but generally good
ignore_missing_imports = False
follow_imports = normal

[mypy-pandas.*]
# Pandas has good type support in recent versions
ignore_missing_imports = False
follow_imports = normal

[mypy-matplotlib.*]
# Matplotlib has basic type support
ignore_missing_imports = True

[mypy-seaborn.*]
# Seaborn has limited type information
ignore_missing_imports = True

[mypy-plotly.*]
# Plotly has limited type information
ignore_missing_imports = True

# Testing and development modules
[mypy-pytest.*]
ignore_missing_imports = True

[mypy-pytest_cov.*]
ignore_missing_imports = True

[mypy-coverage.*]
ignore_missing_imports = True

[mypy-hypothesis.*]
ignore_missing_imports = True

# Documentation and development tools
[mypy-sphinx.*]
ignore_missing_imports = True

[mypy-setuptools.*]
ignore_missing_imports = True

[mypy-wheel.*]
ignore_missing_imports = True

# Per-directory configuration

# Relax type checking for tests - testing often requires dynamic behavior
[mypy-tests.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
disallow_untyped_decorators = False
ignore_errors = False
# Allow dynamic content in tests
allow_redefinition = True
# Allow tests to access private members
disable_error_code = misc

# Examples can be less strict for clarity
[mypy-examples.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
check_untyped_defs = False
ignore_errors = False
# Allow more flexible typing in examples
allow_any_generics = True

# Setup and configuration files
[mypy-setup]
ignore_errors = True

[mypy-conftest]
ignore_errors = True

# Source code modules with specific considerations

# Common utilities should be strictly typed
[mypy-src.common.*]
disallow_any_generics = False  # Allow generic types for IDMapper
warn_return_any = True
strict_optional = True

# Network module works with C++ bindings, allow some flexibility
[mypy-src.network.*]
# NetworkIt returns many Any types due to C++ binding limitations
disallow_any_generics = False
warn_return_any = False  # Too many false positives with NetworkIt

# GLP module should be strictly typed as it's core functionality
[mypy-src.glp.*]
disallow_any_generics = False
warn_return_any = True
strict_optional = True

# Timeseries module deals with complex data structures
[mypy-src.timeseries.*]
disallow_any_generics = False
warn_return_any = True

# Specific error code configurations
# Disable specific error codes that are problematic for scientific computing

# Allow ignore comments for C++ binding integration
enable_error_code = ignore-without-code
disable_error_code = 
    # misc covers various issues that are common with C++ bindings
    # misc

# Plugin configuration for better scientific library support
plugins = 
    # numpy.typing plugin if available
    # numpy.typing.mypy_plugin

# Reporting configuration
show_traceback = True
raise_exceptions = False

# Advanced type checking options
# Strict concatenation and arithmetic for scientific computing accuracy
strict_concatenate = True

# Allow untyped calls to C++ binding functions
allow_untyped_calls = False

# Experimental features that may help with scientific libraries
enable_incomplete_feature = 
    # NewGenericSyntax for better generic support
    # UnpackedTupleAccess for tuple handling