# Pre-commit configuration for Guided Label Propagation library
# Comprehensive code quality pipeline for scientific computing

repos:
  # Code formatting and style
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        name: Format Python code with Black
        language_version: python3
        args: [--line-length=88]
        exclude: ^(docs/|build/|dist/)

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort imports with isort
        args: [--profile=black, --line-length=88]
        exclude: ^(docs/|build/|dist/)

  # Ruff linting (replaces flake8, pyupgrade, etc.)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.15
    hooks:
      - id: ruff
        name: Lint with Ruff
        args: [--fix, --exit-non-zero-on-fix]
        exclude: ^(docs/|build/|dist/)
      - id: ruff-format
        name: Format with Ruff
        exclude: ^(docs/|build/|dist/)

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: Static type checking with MyPy
        additional_dependencies: [
          types-requests,
          types-setuptools,
          pandas-stubs,
          numpy
        ]
        exclude: ^(docs/|build/|dist/|tests/|examples/)
        args: [--config-file=.mypy.ini]

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security linting with Bandit
        args: [-r, -ll, --skip=B101,B601,B602,B603]  # Skip assert and subprocess for scientific computing
        exclude: ^(tests/|examples/|docs/)

  # General code quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Python-specific
      - id: check-ast
        name: Check Python AST validity
      - id: check-builtin-literals
        name: Check for builtin type constructor use
      - id: check-docstring-first
        name: Check docstring is first
      - id: debug-statements
        name: Check for debugger imports
      - id: name-tests-test
        name: Check test naming convention
        args: [--pytest-test-first]

      # General file quality
      - id: check-added-large-files
        name: Check for large files
        args: [--maxkb=1024]  # 1MB limit
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-yaml
        name: Check YAML syntax
        exclude: ^(.github/workflows/|conda.recipe/)
      - id: check-toml
        name: Check TOML syntax
      - id: check-json
        name: Check JSON syntax
        exclude: ^(tests/fixtures/.*\.json)$  # Allow malformed test fixtures

      # Whitespace and formatting
      - id: end-of-file-fixer
        name: Fix end of files
        exclude: ^(tests/fixtures/)
      - id: trailing-whitespace
        name: Trim trailing whitespace
        exclude: ^(tests/fixtures/|.*\.md)$
      - id: mixed-line-ending
        name: Check line endings

  # Documentation quality
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Check docstring style
        args: [--convention=google, --add-ignore=D100,D104,D105,D107]
        exclude: ^(tests/|examples/|setup.py|conftest.py)

  # Scientific data validation
  - repo: local
    hooks:
      # Validate CSV test fixtures
      - id: validate-csv-fixtures
        name: Validate CSV test fixtures
        entry: python scripts/validate_csv_fixtures.py
        language: python
        files: ^tests/fixtures/.*\.csv$
        pass_filenames: true
        additional_dependencies: [polars]

      # Check for proper random seeds in stochastic code
      - id: check-random-seeds
        name: Check for random seeds in stochastic code
        entry: python scripts/check_random_seeds.py
        language: python
        files: \.(py)$
        exclude: ^(tests/|examples/)

      # Validate NetworkIt usage patterns
      - id: validate-networkit-usage
        name: Validate NetworkIt usage patterns
        entry: bash -c 'grep -n "nk\." src/**/*.py | grep -v "nk\.Graph\|nk\.components\|nk\.centrality" && exit 1 || exit 0'
        language: system
        files: ^src/.*\.py$
        verbose: true

  # Jupyter notebook cleaning (if any)
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout
        name: Strip notebook outputs
        files: \.ipynb$

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: Format YAML/JSON files
        types_or: [yaml, json]
        exclude: ^(tests/fixtures/|\.github/workflows/)

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Lint shell scripts
        files: \.(sh|bash)$

  # Poetry/dependency management
  - repo: https://github.com/python-poetry/poetry
    rev: 1.7.1
    hooks:
      - id: poetry-check
        name: Validate pyproject.toml
      - id: poetry-lock
        name: Check poetry.lock consistency
        args: [--check]

  # Spell checking for documentation
  - repo: https://github.com/codespell-project/codespell
    rev: v2.2.6
    hooks:
      - id: codespell
        name: Check spelling in documentation
        args: [--write-changes]
        exclude: ^(\.git/|build/|dist/|.*\.ipynb)$
        additional_dependencies: [tomli]

# Global configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: 'main'
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: monthly
  skip: [mypy, validate-csv-fixtures, check-random-seeds, validate-networkit-usage]

# Default language version
default_language_version:
  python: python3.9

# Fail fast - stop on first failure
fail_fast: false

# Exclude patterns
exclude: |
  (?x)^(
    build/|
    dist/|
    \.eggs/|
    \.git/|
    \.mypy_cache/|
    \.pytest_cache/|
    \.ruff_cache/|
    \.tox/|
    \.venv/|
    __pycache__/|
    node_modules/|
    .*\.egg-info/
  )$

  # Custom scientific computing checks
  - repo: local
    hooks:
      # Check for proper NumPy/SciPy usage
      - id: scientific-imports
        name: Check scientific library imports
        entry: python scripts/check_scientific_imports.py
        language: python
        files: ^src/.*\.py$
        additional_dependencies: [ast]

      # Validate test markers match pytest.ini
      - id: validate-test-markers
        name: Validate pytest markers
        entry: python scripts/validate_test_markers.py
        language: python
        files: ^tests/.*\.py$
        additional_dependencies: [pytest]

      # Check for memory leaks in large data tests
      - id: check-memory-usage
        name: Check for potential memory leaks
        entry: bash -c 'grep -n "\.read_csv\|\.from_pandas\|nk\.Graph" tests/**/*.py | grep -v "del \|\.clear()\|with " && echo "Warning: Potential memory leak in tests" || exit 0'
        language: system
        files: ^tests/.*\.py$
        verbose: true

      # Validate algorithm convergence parameters
      - id: validate-convergence-params
        name: Validate convergence parameters
        entry: python scripts/validate_convergence_params.py
        language: python
        files: ^src/(glp|timeseries)/.*\.py$

  # Performance considerations for scientific computing
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        name: Upgrade Python syntax
        args: [--py39-plus]
        exclude: ^(docs/|build/|dist/)

  # Final validation step
  - repo: local
    hooks:
      - id: final-validation
        name: Final validation check
        entry: python scripts/final_validation.py
        language: python
        stages: [commit]
        pass_filenames: false
        always_run: true